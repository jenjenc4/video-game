{"version":3,"sources":["components/UpdateVideoGame.js","components/VideoGame.js","components/CreateVideoGame.js","components/VideoGames.js","App.js","serviceWorker.js","index.js"],"names":["UpdateVideoGame","props","addConsoles","newConsoles","state","consoles","map","x","push","setState","removeConsole","index","splice","handleConsoleChange","value","handleChange","target","type","checked","parseInt","name","handleSubmit","event","preventDefault","fetch","process","game","id","method","headers","body","JSON","stringify","then","refresh","close","genre","release","players","owned","displayConsoles","this","console","key","onChange","className","onClick","onSubmit","placeholder","htmlFor","React","Component","VideoGame","useState","open","setOpen","toggleOpen","displayUpdate","_id","CreateVideoGame","videoGames","getVideoGames","response","json","displayGames","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d52e0b92.chunk.js","sourcesContent":["//create and update form & what's a react hook.. use state\nimport React from \"react\";\n//Grabs the env variable (from presentation's env) from process for api_url\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass UpdateVideoGame extends React.Component {\n  constructor(props) {\n    super(props);\n    const {game} = props;\n    //equivalent to const game = props.games; \n    //below represents our empty form\n    this.state = {\n      name: game.name, \n      type: game.type,\n      genre: game.genre,\n      release: game.release,\n      players: game.players,\n      consoles: game.consoles,\n      owned: game.owned \n    };\n  }\n  addConsoles = () => {\n    const newConsoles = this.state.consoles.map((x) => x);\n    newConsoles.push(\"\");\n    this.setState({ consoles: newConsoles });\n  };\n  removeConsole = (index) => {\n    const newConsoles = this.state.consoles.map((x) => x);\n    newConsoles.splice(index, 1);\n    this.setState({ consoles: newConsoles });\n  };\n  handleConsoleChange = (value, index) => {\n    const newConsoles = this.state.consoles.map((x) => x);\n    newConsoles[index] = value;\n    this.setState({ consoles: newConsoles });\n  };\n  handleChange = ({ target }) => {\n    let value = target.type === \"checkbox\" ? target.checked : target.value;\n    value = target.type === \"number\" ? parseInt(value) : value;\n    this.setState({ [target.name]: value });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    fetch(`${API_URL}/video-games/${this.props.game.id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(this.state),\n    })\n      .then(this.props.refresh)\n        .then(this.props.close)\n}\n\n  render() {\n    const displayConsoles = this.state.consoles.map((console, index) => {\n      return (\n        <div key={index}>\n          <select\n            value={this.state.consoles[index]}\n            onChange={({ target }) =>\n              this.handleConsoleChange(target.value, index)\n            }\n          >\n            <option value=\"\"> Choose a Console</option>\n            <option value=\"ps1\">Playstation1</option>\n            <option value=\"ps2\">Playstation 2</option>\n            <option value=\"ps3\">Playstation 3</option>\n            <option value=\"ps4\">Playstation 4</option>\n            <option value=\"xbox\">Xbox</option>\n            <option value=\"xbox360\">Xbox 360</option>\n            <option value=\"xbox1\">Xbox One</option>\n            <option value=\"nes\">NES</option>\n            <option value=\"snes\">SNES</option>\n            <option value=\"n64\">Nintendo 64</option>\n            <option value=\"gc\">GameCube</option>\n            <option value=\"switch\">Switch</option>\n            <option value=\"pc\">PC</option>\n          </select>\n          <input\n            className=\"del-btn\"\n            type=\"button\"\n            value=\"x\"\n            onClick={() => this.removeConsole(index)}\n          />\n        </div>\n      );\n    });\n    return (\n      <form className=\"update\" onSubmit={this.handleSubmit}>\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Game Name\"\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"type\"\n          type=\"text\"\n          placeholder=\"Game Type\"\n          value={this.state.type}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"genre\"\n          type=\"text\"\n          placeholder=\"Game Genre\"\n          value={this.state.genre}\n          onChange={this.handleChange}\n        />\n        <div>\n          <label htmlFor=\"release\">First Release </label>\n          <input\n            name=\"release\"\n            type=\"date\"\n            placeholder=\"Release Date\"\n            value={this.state.release}\n            onChange={this.handleChange}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"players\">Number of Players</label>\n          <input\n            name=\"players\"\n            type=\"number\"\n            placeholder=\"Players\"\n            value={this.state.players}\n            onChange={this.handleChange}\n          />\n        </div>\n        {displayConsoles}\n        <input type=\"button\" value=\"Add Console\" onClick={this.addConsoles} />\n        <div>\n          <label htmlFor=\"owned\">Owned</label>\n          <input\n            name=\"owned\"\n            type=\"checkbox\"\n            checked={this.state.owned}\n            onChange={this.handleChange}\n          />\n        </div>\n        <button>Update Game</button>\n      </form>\n    );\n  }\n}\n\nexport default UpdateVideoGame;\n","import React, { useState } from 'react'\nimport UpdateVideoGame from './UpdateVideoGame';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst VideoGame = ({ game, refresh }) => {\n    const[open, setOpen] = useState(false);\n    const deleteGame= () => {\n        fetch(`${API_URL}/video-games/${game._id}`, {\n            method: \"DELETE\"\n        }) .then(refresh)\n    }\n    const toggleOpen = () =>setOpen(!open);\n    const displayUpdate = open ? \n    <fieldset>\n        <UpdateVideoGame game={game} refresh={refresh} close={toggleOpen} /> \n\n    </fieldset> :\n    '' ;\n\n        return (\n            <div>\n             <span>{game.name}</span> \n             <button className=\"edit\" onClick={toggleOpen}>Edit</button>\n             <button className=\"del-btned\" onClick={deleteGame}>X</button>\n            {displayUpdate}\n            </div>\n        );\n    }\n\n\n\n\nexport default VideoGame;","//create and update form & what's a react hook.. use state\nimport React from \"react\";\n//Grabs the env variable (from presentation's env) from process for api_url\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass CreateVideoGame extends React.Component {\n  constructor(props) {\n    super(props);\n    //below represents our empty form\n    this.state = {\n      name: \"\", //type text input\n      type: \"\",\n      genre: \"\",\n      release: \"\", //date input\n      players: 0,\n      consoles: [\"\"], //menu dropdown input\n      owned: false, //boxed check input\n    };\n  }\n  addConsoles = () => {\n    const newConsoles = this.state.consoles.map((x) => x);\n    newConsoles.push(\"\");\n    this.setState({ consoles: newConsoles });\n  };\n  removeConsole = (index) => {\n    const newConsoles = this.state.consoles.map((x) => x);\n    newConsoles.splice(index, 1);\n    this.setState({ consoles: newConsoles });\n  };\n  handleConsoleChange = (value, index) => {\n    const newConsoles = this.state.consoles.map((x) => x);\n    newConsoles[index] = value;\n    this.setState({ consoles: newConsoles });\n  };\n  handleChange = ({ target }) => {\n    let value = target.type === \"checkbox\" ? target.checked : target.value;\n    value = target.type === \"number\" ? parseInt(value) : value;\n    this.setState({ [target.name]: value });\n  };\n  handleSubmit = (event) => {\n    event.preventDefault();\n    fetch(`${API_URL}/video-games`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(this.state),\n    })\n      .then(this.props.refresh)\n      .then(() =>\n        this.setState({\n          name: \"\", //type text input\n          type: \"\",\n          genre: \"\",\n          release: \"\", //date input\n          players: 0,\n          consoles: [\"\"], //menu dropdown input\n          owned: false, //boxed check input\n        })\n      );\n  };\n  render() {\n    const displayConsoles = this.state.consoles.map((console, index) => {\n      return (\n        <div key={index}>\n          <select\n            value={this.state.consoles[index]}\n            onChange={({ target }) =>\n              this.handleConsoleChange(target.value, index)\n            }\n          >\n            <option value=\"\"> Choose a Console</option>\n            <option value=\"ps1\">Playstation1</option>\n            <option value=\"ps2\">Playstation 2</option>\n            <option value=\"ps3\">Playstation 3</option>\n            <option value=\"ps4\">Playstation 4</option>\n            <option value=\"xbox\">Xbox</option>\n            <option value=\"xbox360\">Xbox 360</option>\n            <option value=\"xbox1\">Xbox One</option>\n            <option value=\"nes\">NES</option>\n            <option value=\"snes\">SNES</option>\n            <option value=\"n64\">Nintendo 64</option>\n            <option value=\"gc\">GameCube</option>\n            <option value=\"switch\">Switch</option>\n            <option value=\"pc\">PC</option>\n          </select>\n          <input\n            className=\"del-btn\"\n            type=\"button\"\n            value=\"x\"\n            onClick={() => this.removeConsole(index)}\n          />\n        </div>\n      );\n    });\n    return (\n      <form id=\"create\" onSubmit={this.handleSubmit}>\n        <input\n          name=\"name\"\n          type=\"text\"\n          placeholder=\"Game Name\"\n          value={this.state.name}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"type\"\n          type=\"text\"\n          placeholder=\"Game Type\"\n          value={this.state.type}\n          onChange={this.handleChange}\n        />\n        <input\n          name=\"genre\"\n          type=\"text\"\n          placeholder=\"Game Genre\"\n          value={this.state.genre}\n          onChange={this.handleChange}\n        />\n        <div>\n          <label htmlFor=\"release\">First Release </label>\n          <input\n            name=\"release\"\n            type=\"date\"\n            placeholder=\"Release Date\"\n            value={this.state.release}\n            onChange={this.handleChange}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"players\">Number of Players</label>\n          <input\n            name=\"players\"\n            type=\"number\"\n            placeholder=\"Players\"\n            value={this.state.players}\n            onChange={this.handleChange}\n          />\n        </div>\n        {displayConsoles}\n        <input type=\"button\" value=\"Add Console\" onClick={this.addConsoles} />\n        <div>\n          <label htmlFor=\"owned\">Owned</label>\n          <input\n            name=\"owned\"\n            type=\"checkbox\"\n            checked={this.state.owned}\n            onChange={this.handleChange}\n          />\n        </div>\n        <button>Add Game</button>\n      </form>\n    );\n  }\n}\n\nexport default CreateVideoGame;\n","import React, { Component } from 'react'\nimport VideoGame from './VideoGame';\nimport CreateVideoGame from './CreateVideoGame'\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nexport default class extends Component {\n    state = {\n        videoGames:[]\n    }\n\n    getVideoGames = () => {\n        //fetch(API_URL + '/video-games')//URL (in memory) + /video-games =url/video-games\n        fetch(`${API_URL}/video-games`) //URL -> URL/video-games\n            .then(response=> response.json())\n            .then(videoGames => this.setState({videoGames})) //videoGames has been unpacked by line 13\n    }\n    componentDidMount(){\n        this.getVideoGames();\n    }\n    render() {\n        const displayGames = this.state.videoGames\n        .map(game => <VideoGame key={game._id} \n            game={game} \n            refresh={this.getVideoGames}/>)\n        return (\n            <div id=\"HelloThere\">\n                <h1>Video Games</h1>\n                <CreateVideoGame refresh={this.getVideoGames}/>\n                \n                {displayGames}\n            </div>\n        )\n     }\n}","import React from 'react';\nimport './App.css';\nimport VideoGames from './components/VideoGames'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <VideoGames/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}